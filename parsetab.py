
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ENQUANTO IMPRIMIR INTEIRO LBRACE LEIA LPAREN MAIOR MAIORIGUAL MENOR MENORIGUAL NUMERO OP_DIFERENTE OP_DIV OP_IGUAL OP_IGUALDADE OP_MULT OP_PONTO OP_PONTO_VIRGULA OP_SOMA OP_SUB OP_VIRGULA PARA RBRACE REAL RPAREN SE SENAO TEXTO TEXTONORMAL VARIAVELvariavel : VARIAVELliteral : NUMERO\n               | VARIAVEL\n               | TEXTONORMALstatement_list : statement_list statement\n                      | statementstatement : INTEIRO VARIAVEL OP_PONTO_VIRGULA\n                 | REAL VARIAVEL OP_PONTO_VIRGULA\n                 | TEXTO VARIAVEL OP_PONTO_VIRGULAstatement : VARIAVEL OP_IGUAL expression OP_PONTO_VIRGULAexpression : expression OP_SOMA expression\n                  | expression OP_SUB expression\n                  | expression OP_MULT expression\n                  | expression OP_DIV expressionexpression : expression MAIOR expression\n                  | expression MENOR expression\n                  | expression MAIORIGUAL expression\n                  | expression MENORIGUAL expression\n                  | expression OP_IGUALDADE expression\n                  | expression OP_DIFERENTE expressionexpression : LPAREN expression RPARENexpression : NUMERO\n                  | VARIAVELstatement : SE LPAREN expression RPAREN LBRACE statement RBRACE SENAO LBRACE statement RBRACE\n                 | SE LPAREN expression RPAREN LBRACE statement RBRACEstatement : ENQUANTO LPAREN expression RPAREN LBRACE statement RBRACEstatement : PARA LPAREN expression OP_PONTO_VIRGULA expression OP_PONTO_VIRGULA expression RPAREN LBRACE statement RBRACEimprimir_statement : IMPRIMIR LPAREN literal RPARENleia_statement : LEIA variavel'
    
_lr_action_items = {'VARIAVEL':([0,],[2,]),'$end':([1,2,],[0,-1,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'variavel':([0,],[1,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> variavel","S'",1,None,None,None),
  ('variavel -> VARIAVEL','variavel',1,'p_variavel','grammar.py',8),
  ('literal -> NUMERO','literal',1,'p_literal','grammar.py',12),
  ('literal -> VARIAVEL','literal',1,'p_literal','grammar.py',13),
  ('literal -> TEXTONORMAL','literal',1,'p_literal','grammar.py',14),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','grammar.py',18),
  ('statement_list -> statement','statement_list',1,'p_statement_list','grammar.py',19),
  ('statement -> INTEIRO VARIAVEL OP_PONTO_VIRGULA','statement',3,'p_define_tipo','grammar.py',23),
  ('statement -> REAL VARIAVEL OP_PONTO_VIRGULA','statement',3,'p_define_tipo','grammar.py',24),
  ('statement -> TEXTO VARIAVEL OP_PONTO_VIRGULA','statement',3,'p_define_tipo','grammar.py',25),
  ('statement -> VARIAVEL OP_IGUAL expression OP_PONTO_VIRGULA','statement',4,'p_statement_atribuicao','grammar.py',29),
  ('expression -> expression OP_SOMA expression','expression',3,'p_expression_arit','grammar.py',33),
  ('expression -> expression OP_SUB expression','expression',3,'p_expression_arit','grammar.py',34),
  ('expression -> expression OP_MULT expression','expression',3,'p_expression_arit','grammar.py',35),
  ('expression -> expression OP_DIV expression','expression',3,'p_expression_arit','grammar.py',36),
  ('expression -> expression MAIOR expression','expression',3,'p_expression_rel','grammar.py',40),
  ('expression -> expression MENOR expression','expression',3,'p_expression_rel','grammar.py',41),
  ('expression -> expression MAIORIGUAL expression','expression',3,'p_expression_rel','grammar.py',42),
  ('expression -> expression MENORIGUAL expression','expression',3,'p_expression_rel','grammar.py',43),
  ('expression -> expression OP_IGUALDADE expression','expression',3,'p_expression_rel','grammar.py',44),
  ('expression -> expression OP_DIFERENTE expression','expression',3,'p_expression_rel','grammar.py',45),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression','grammar.py',49),
  ('expression -> NUMERO','expression',1,'p_expression_var','grammar.py',53),
  ('expression -> VARIAVEL','expression',1,'p_expression_var','grammar.py',54),
  ('statement -> SE LPAREN expression RPAREN LBRACE statement RBRACE SENAO LBRACE statement RBRACE','statement',11,'p_statement_se','grammar.py',58),
  ('statement -> SE LPAREN expression RPAREN LBRACE statement RBRACE','statement',7,'p_statement_se','grammar.py',59),
  ('statement -> ENQUANTO LPAREN expression RPAREN LBRACE statement RBRACE','statement',7,'p_statement_enquanto','grammar.py',63),
  ('statement -> PARA LPAREN expression OP_PONTO_VIRGULA expression OP_PONTO_VIRGULA expression RPAREN LBRACE statement RBRACE','statement',11,'p_statement_para','grammar.py',67),
  ('imprimir_statement -> IMPRIMIR LPAREN literal RPAREN','imprimir_statement',4,'p_statement_imprimir','grammar.py',71),
  ('leia_statement -> LEIA variavel','leia_statement',2,'p_statement_leia','grammar.py',75),
]
